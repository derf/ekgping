#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

use IO::Handle;
use IPC::Run qw(harness);
use Term::Size;
use Time::HiRes qw(usleep);

our $VERSION = '0.1';

my $host    = shift;
my $id      = 0;
my $last_id = 0;
my $beep;
my $was_beep   = 1;
my $dead_count = 0;
my $column     = 0;
my $column_max = ( Term::Size::chars * STDOUT { IO } )[0];

my $ping = harness(
	[ 'ping', '-n', $host ],
	'<'  => \undef,
	'>&' => \&parse_ping_output,
);

local $SIG{TERM} = \&quit;
local $SIG{INT}  = \&quit;

sub parse_ping_output {
	my ($line) = @_;

	chomp($line);

	if ( $line
		=~ m{ ^ \d+ \s bytes \s from \s \S+ \s icmp_req = (?<id> \d+ ) }x )
	{
		$id = $+{id};
	}

	return;
}

sub quit {
	$ping->kill_kill( grace => 1 );
	print "\e[?25h";
	exit 0;
}

$ping->start();

# Ignore first line
$ping->pump();

print "\e[?25l";

while ( usleep(100_000) ) {

	$ping->pump_nb();

	if ( $column++ == $column_max ) {
		print "\r";
		$column = 0;
	}

	if ( $column != $column_max ) {
		print "\e[1C \e[1D\e[1D";
	}

	if ( $id != $last_id ) {
		$beep = 1;
		print q{^};
		$last_id    = $id;
		$dead_count = 0;
	}
	else {
		$beep = 0;
		$dead_count++;
		if ( $dead_count > 30 ) {
			$beep = 1;
		}

		print '_';
	}

	STDOUT->flush();
}

$ping->kill_kill( grace => 1 );

__END__

=head1 NAME

=head1 SYNOPSIS

=head1 VERSION

=head1 DESCRIPTION

=head1 OPTIONS

=over

=back

=head1 EXIT STATUS

=head1 CONFIGURATION

None.

=head1 DEPENDENCIES

=over

=back

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Copyright (C) 2011 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

  0. You just DO WHAT THE FUCK YOU WANT TO.
